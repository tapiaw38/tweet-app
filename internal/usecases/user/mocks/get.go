// Code generated by MockGen. DO NOT EDIT.
// Source: internal/usecases/user/get.go
//
// Generated by this command:
//
//	mockgen -source=internal/usecases/user/get.go -destination=internal/usecases/user/mocks/get.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	user "github.com/tapiaw38/tweet-app/internal/usecases/user"
	gomock "go.uber.org/mock/gomock"
)

// MockGetUsecase is a mock of GetUsecase interface.
type MockGetUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockGetUsecaseMockRecorder
}

// MockGetUsecaseMockRecorder is the mock recorder for MockGetUsecase.
type MockGetUsecaseMockRecorder struct {
	mock *MockGetUsecase
}

// NewMockGetUsecase creates a new mock instance.
func NewMockGetUsecase(ctrl *gomock.Controller) *MockGetUsecase {
	mock := &MockGetUsecase{ctrl: ctrl}
	mock.recorder = &MockGetUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGetUsecase) EXPECT() *MockGetUsecaseMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockGetUsecase) Execute(arg0 context.Context, arg1 uint64) (*user.GetOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute", arg0, arg1)
	ret0, _ := ret[0].(*user.GetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Execute indicates an expected call of Execute.
func (mr *MockGetUsecaseMockRecorder) Execute(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockGetUsecase)(nil).Execute), arg0, arg1)
}
